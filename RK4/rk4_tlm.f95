!        Generated by TAPENADE     (INRIA, Ecuador team)
!  Tapenade 3.16 (develop) - 31 May 2021 11:17
!
!  Differentiation of fwd in forward (tangent) mode:
!   variations   of useful results: w bs bu
!   with respect to varying inputs: w bs bu
!   RW status of diff variables: w:in-out bs:in-out bu:in-out
SUBROUTINE FWD_D(nt, w, wd, bu, bud, bs, bsd, nu, ns, dt)
    IMPLICIT NONE
    INTEGER :: nt, t
    REAL :: dt, nu, ns
    REAL :: dbu, dbs, dw
    REAL :: dbud, dbsd, dwd
    REAL :: k1_bu, k1_bs, k1_w
    REAL :: k1_bud, k1_bsd, k1_wd
    REAL :: k2_bu, k2_bs, k2_w
    REAL :: k2_bud, k2_bsd, k2_wd
    REAL :: k3_bu, k3_bs, k3_w
    REAL :: k3_bud, k3_bsd, k3_wd
    REAL :: k4_bu, k4_bs, k4_w
    REAL :: k4_bud, k4_bsd, k4_wd
    REAL :: xtmp_bu, xtmp_bs, xtmp_w
    REAL :: xtmp_bud, xtmp_bsd, xtmp_wd
    REAL, INTENT(INOUT) :: w(nt), bu(nt), bs(nt)
    REAL, INTENT(INOUT) :: wd(nt), bud(nt), bsd(nt)
  ! rhs 
    nu = 0.01
    ns = 0.005
    dt = 0.1
    wd(1) = 0.0
    w(1) = 0.1
    bud(1) = 0.0
    bu(1) = 5
    bsd(1) = 0.0
    bs(1) = 1
    DO t=1,nt-1
  ! rhs 
      IF (bs(t) .LT. bu(t)) THEN
        dwd = bud(t)
        dw = bu(t)
      ELSE
        dwd = bsd(t)
        dw = bs(t)
      END IF
      dbud = -(nu**2*wd(t))
      dbu = -(nu*nu*w(t))
      dbsd = -(ns**2*wd(t))
      dbs = -(ns*ns*w(t))
  ! k1=self.rhs(self.xvar)*self.dt
      k1_bud = dt*dbud
      k1_bu = dbu*dt
      k1_bsd = dt*dbsd
      k1_bs = dbs*dt
      k1_wd = dt*dwd
      k1_w = dw*dt
  ! xtmp=self.xvar+0.5*k1
      xtmp_wd = wd(t) + 0.5*k1_wd
      xtmp_w = w(t) + 0.5*k1_w
      xtmp_bud = bud(t) + 0.5*k1_bud
      xtmp_bu = bu(t) + 0.5*k1_bu
      xtmp_bsd = bsd(t) + 0.5*k1_bsd
      xtmp_bs = bs(t) + 0.5*k1_bs
  ! rhs 
      IF (xtmp_bs .LT. xtmp_bu) THEN
        dwd = xtmp_bud
        dw = xtmp_bu
      ELSE
        dwd = xtmp_bsd
        dw = xtmp_bs
      END IF
      dbud = -(nu**2*xtmp_wd)
      dbu = -(nu*nu*xtmp_w)
      dbsd = -(ns**2*xtmp_wd)
      dbs = -(ns*ns*xtmp_w)
  ! k2=self.rhs(xtmp)*self.dt
      k2_bud = dt*dbud
      k2_bu = dbu*dt
      k2_bsd = dt*dbsd
      k2_bs = dbs*dt
      k2_wd = dt*dwd
      k2_w = dw*dt
  ! xtmp=self.xvar+0.5*k2
      xtmp_wd = wd(t) + 0.5*k2_wd
      xtmp_w = w(t) + 0.5*k2_w
      xtmp_bud = bud(t) + 0.5*k2_bud
      xtmp_bu = bu(t) + 0.5*k2_bu
      xtmp_bsd = bsd(t) + 0.5*k2_bsd
      xtmp_bs = bs(t) + 0.5*k2_bs
  ! rhs 
      IF (xtmp_bs .LT. xtmp_bu) THEN
        dwd = xtmp_bud
        dw = xtmp_bu
      ELSE
        dwd = xtmp_bsd
        dw = xtmp_bs
      END IF
      dbud = -(nu**2*xtmp_wd)
      dbu = -(nu*nu*xtmp_w)
      dbsd = -(ns**2*xtmp_wd)
      dbs = -(ns*ns*xtmp_w)
  ! k3=self.rhs(xtmp)*self.dt
      k3_bud = dt*dbud
      k3_bu = dbu*dt
      k3_bsd = dt*dbsd
      k3_bs = dbs*dt
      k3_wd = dt*dwd
      k3_w = dw*dt
  ! xtmp=self.xvar+k2
      xtmp_wd = wd(t) + 0.5*k2_wd
      xtmp_w = w(t) + 0.5*k2_w
      xtmp_bud = bud(t) + 0.5*k2_bud
      xtmp_bu = bu(t) + 0.5*k2_bu
      xtmp_bsd = bsd(t) + 0.5*k2_bsd
      xtmp_bs = bs(t) + 0.5*k2_bs
  ! rhs 
      IF (xtmp_bs .LT. xtmp_bu) THEN
        dwd = xtmp_bud
        dw = xtmp_bu
      ELSE
        dwd = xtmp_bsd
        dw = xtmp_bs
      END IF
      dbud = -(nu**2*xtmp_wd)
      dbu = -(nu*nu*xtmp_w)
      dbsd = -(ns**2*xtmp_wd)
      dbs = -(ns*ns*xtmp_w)
  ! k4=self.rhs(xtmp)*self.dt
      k4_bud = dt*dbud
      k4_bu = dbu*dt
      k4_bsd = dt*dbsd
      k4_bs = dbs*dt
      k4_wd = dt*dwd
      k4_w = dw*dt
  ! self.xvar+=(k1+2*k2+2*k3+k4)/6.
      bud(t+1) = bud(t) + (k1_bud+2*k2_bud+2*k3_bud+k4_bud)/6.
      bu(t+1) = bu(t) + (k1_bu+2*k2_bu+2*k3_bu+k4_bu)/6.
      bsd(t+1) = bsd(t) + (k1_bsd+2*k2_bsd+2*k3_bsd+k4_bsd)/6.
      bs(t+1) = bs(t) + (k1_bs+2*k2_bs+2*k3_bs+k4_bs)/6.
      wd(t+1) = wd(t) + (k1_wd+2*k2_wd+2*k3_wd+k4_wd)/6.
      w(t+1) = w(t) + (k1_w+2*k2_w+2*k3_w+k4_w)/6.
    END DO
END SUBROUTINE FWD_D